/* eslint-disable no-await-in-loop */
import { promises as fs } from 'fs'
import path from 'path'

const INDEX_PATH = 'packages/icons/src/components/Icon/GeneratedIcons/index.ts'

const COMMENT_HEADER = `/**
* Provide the icon component for the icon name.
* This file is automatically generated from /scripts/generateIconFiles.mjs.
* PLEASE DO NOT EDIT HERE
*/`

const templateIcon = (iconName, svg) => `${COMMENT_HEADER}
import { IconV2 } from '../IconV2'
import type { IconProps } from '../IconV2'

export const ${iconName} = ({
  ...props
}: IconProps) => (
  // eslint-disable-next-line react/jsx-props-no-spreading
  <IconV2 {...props}>${svg}</IconV2>
)
`

const toPascalCase = str =>
  str.replace(/(^\w|-\w)/g, match => match.replace('-', '').toUpperCase())

const generateVariableName = filePath => {
  const parsedPath = path.parse(filePath)
  const fileName = toPascalCase(parsedPath.name)
  const parentDir = path.basename(path.dirname(filePath))

  const isOutline = parentDir.includes('outline')
  const iconName = `${fileName}${isOutline ? 'Outline' : ''}`

  return iconName
}

const readDirectoryRecursive = async dir => {
  let results = []

  const list = await fs.readdir(dir, { withFileTypes: true })

  for (const file of list) {
    const filePath = path.resolve(dir, file.name)

    if (file.isDirectory()) {
      const subDirResults = await readDirectoryRecursive(filePath)
      results = results.concat(subDirResults)
    } else if (path.extname(file.name).toLowerCase() === '.svg') {
      results.push(filePath)
    }
  }

  return results
}

const readSvg = async filePath => {
  const svgContent = await fs.readFile(filePath, 'utf-8')
  const innerSvgContent = svgContent.replace(/<svg[^>]*>|<\/svg>/g, '') // Remove <svg ...> and </svg> tags

  return innerSvgContent.replace(/`/g, '\\`') // Escape backticks
}

const appendExportToIndex = async iconName => {
  const exportStatement = `export { ${iconName} } from './${iconName}'\n`

  try {
    await fs.appendFile(INDEX_PATH, exportStatement)
  } catch (error) {
    console.error('Error appending to index file:', error)
  }
}

const resetIconsFolder = async () => {
  const iconsFolderPath = 'packages/icons/src/components/Icon/GeneratedIcons'

  try {
    const files = await fs.readdir(iconsFolderPath)
    const deletePromises = files.map(file =>
      fs.unlink(path.join(iconsFolderPath, file)),
    )
    await Promise.all(deletePromises)
    console.log(`Deleted all files in ${iconsFolderPath}`)
  } catch (error) {
    console.error('Error deleting files in icons folder:', error)
  }
}

const main = async () => {
  const directoryPath = 'packages/icons/src/components/Icon/assets'

  await resetIconsFolder() // we clean the folder before generating the new icons

  try {
    await fs.appendFile(INDEX_PATH, COMMENT_HEADER)
  } catch (error) {
    console.error('Error appending to index file:', error)
  }

  try {
    const files = await readDirectoryRecursive(directoryPath)
    for (const file of files) {
      if (file.includes('small')) {
        break
      }
      const svgContent = await readSvg(file, '')
      const generatedName = generateVariableName(file)
      const generatedComponent = templateIcon(generatedName, svgContent)
      const filePath = `packages/icons/src/components/Icon/GeneratedIcons/${generatedName}.tsx`

      try {
        await fs.writeFile(filePath, generatedComponent)
        console.log(`File has been written to ${filePath}`)
        await appendExportToIndex(generatedName)
      } catch (error) {
        console.error('Error writing to file:', error)
      }
    }
  } catch (error) {
    console.error('Error reading directory:', error)
  }
}

main()

/* eslint-enable no-await-in-loop */
